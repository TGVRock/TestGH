import{l as g,f as d,e as i}from"./index-0e0f16ca.js";const r=g(),n=d();function c(e){return i.Address.isValidRawAddress(e)}function A(e,t){try{return i.Account.createFromPrivateKey(e,t)}catch{}}async function m(e){const t="get test account info:",u=new i.RepositoryFactoryHttp(n.getTestNetNode()).createAccountRepository();if(!c(e)){r.logger.error(t,"invalid address.",e);return}const a=i.Address.createFromRawAddress(e);return await u.getAccountInfo(a).toPromise().then(s=>s).catch(s=>{r.logger.error(t,"failed.",s)})}async function p(e){const t="get account info:";if(typeof n.accountRepo>"u"){r.logger.error(t,"repository undefined.");return}if(!c(e)){r.logger.error(t,"invalid address.",e);return}const o=i.Address.createFromRawAddress(e);return await n.accountRepo.getAccountInfo(o).toPromise()}async function f(e){const t="get multisig info:";if(typeof n.multisigRepo>"u"){r.logger.error(t,"repository undefined.");return}if(!c(e)){r.logger.error(t,"invalid address.",e);return}return await n.multisigRepo.getMultisigAccountInfo(i.Address.createFromRawAddress(e)).toPromise()}async function y(e){const t="get multisig addresses:",o=await f(e);return typeof o>"u"?(r.logger.error(t,"get multisig info failed.",e),[]):o.isMultisig()?(r.logger.debug(t,"address is multisig account.",e),[]):o.multisigAddresses}export{f as a,y as b,A as c,m as d,p as g,c as i};
