import{u,a as c,j as n}from"./index-3663960e.js";const i=u(),o=c();function s(e){return n.Address.isValidRawAddress(e)}function d(e,t){try{return n.Account.createFromPrivateKey(e,t)}catch{}}async function f(e){const t="get account info:";if(typeof o.accountRepo>"u"){i.logger.error(t,"repository undefined.");return}if(!s(e)){i.logger.error(t,"invalid address.",e);return}const r=n.Address.createFromRawAddress(e);return await o.accountRepo.getAccountInfo(r).toPromise()}async function g(e){const t="get multisig info:";if(typeof o.multisigRepo>"u"){i.logger.error(t,"repository undefined.");return}if(!s(e)){i.logger.error(t,"invalid address.",e);return}return await o.multisigRepo.getMultisigAccountInfo(n.Address.createFromRawAddress(e)).toPromise()}async function l(e){const t="get multisig addresses:",r=await g(e);return typeof r>"u"?(i.logger.error(t,"get multisig info failed.",e),[]):r.isMultisig()?(i.logger.debug(t,"address is multisig account.",e),[]):r.multisigAddresses}export{g as a,l as b,d as c,f as g,s as i};
